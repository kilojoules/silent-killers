To achieve your goal of propagating realistic measurement uncertainties through PyWake and saving a series of flow field images showing the sensitivity of the flow at different times, we can follow a structured approach. Below is a Python script that outlines this process, focusing on Sobol sensitivity analysis of `WS_eff` as a function of `x` and `y`. 

### Prerequisites
Ensure you have the necessary libraries installed:
```bash
pip install pywake sobol_seq matplotlib numpy
```

### Script

```python
import numpy as np
import matplotlib.pyplot as plt
from pywake import pyWake
from pywake.flow_map import FlowMap
from sobol_seq import i4_sobol_generate

# Set up the parameters
num_samples = 100
uncertainty_params = {
    'wind_speed_mean': 8.0,  # Mean wind speed
    'wind_speed_std': 1.0,    # Standard deviation for wind speed
    'turbulence_intensity': 0.1  # Example of another parameter
}

# Generate Sobol sequences for sensitivity analysis
sobol_samples = i4_sobol_generate(2, num_samples)

# Function to run PyWake simulation
def run_pywake_simulation(wind_speed, turbulence_intensity):
    # Initialize your wind farm layout and other parameters here
    # e.g. wind_farm = ...
    
    # Simulate the flow field using PyWake
    flow_map = FlowMap(...)  # Replace with actual flow map generation code
    flow_map.calculate()  # Run the calculation
    return flow_map

# Function to calculate effective wind speed and sensitivity
def calculate_sensitivity(flow_map):
    ws_eff = flow_map.WS_eff  # Extract effective wind speed
    return ws_eff

# Sensitivity analysis loop
for i, sample in enumerate(sobol_samples):
    # Apply uncertainties
    wind_speed = np.clip(uncertainty_params['wind_speed_mean'] + 
                         sample[0] * uncertainty_params['wind_speed_std'], 0, None)
    turbulence_intensity = np.clip(uncertainty_params['turbulence_intensity'] + 
                                   sample[1] * 0.05, 0, None)  # Adjust as needed

    # Run the PyWake simulation
    flow_map = run_pywake_simulation(wind_speed, turbulence_intensity)

    # Calculate effective wind speed
    ws_eff = calculate_sensitivity(flow_map)

    # Save flow field images showing sensitivity at different times
    plt.imshow(ws_eff, extent=(flow_map.x_min, flow_map.x_max, flow_map.y_min, flow_map.y_max), origin='lower')
    plt.colorbar(label='Effective Wind Speed (m/s)')
    plt.title(f'Flow Field Sensitivity - Sample {i+1}')
    plt.xlabel('X Position (m)')
    plt.ylabel('Y Position (m)')
    plt.savefig(f'flow_field_sensitivity_sample_{i+1}.png')
    plt.close()

print("Flow field images saved successfully.")
```

### Explanation
1. **Setup:** The script starts by defining the parameters for your wind field simulation, including the mean wind speed and its standard deviation, along with any other relevant parameters.

2. **Sobol Sequence Generation:** It generates a set of Sobol sequences to sample the input parameter space, which allows for systematic exploration of uncertainty impacts.

3. **Simulation Function:** The `run_pywake_simulation` function is a placeholder where you would initialize your wind farm layout and run the PyWake simulation. Adjust this function based on your specific implementation.

4. **Sensitivity Calculation:** The script calculates the effective wind speed (`WS_eff`) from the flow map.

5. **Image Saving:** For each sample, it generates a flow field image showing the effective wind speed and saves it.

6. **File Naming:** Each image is saved with a unique name corresponding to the sample number.

### Note
- Replace the `FlowMap(...)` and any other placeholders with actual code specific to your wind farm model and PyWake configuration.
- Adjust the uncertainty parameters and the Sobol sequence generation depending on your specific use case and dimensionality.