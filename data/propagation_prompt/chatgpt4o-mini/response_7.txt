To generate a script that propagates realistic measurement uncertainties through PyWake and saves a series of flow field images showing the Sobol sensitivity of the effective wind speed (`WS_eff`) as a function of `x` and `y`, we will follow these steps:

1. **Set Up Environment**: Ensure you have PyWake installed and any necessary dependencies.
2. **Define the Wind Farm**: Create a wind farm model using PyWake.
3. **Generate Input Uncertainties**: Use a Sobol sequence to sample the input uncertainties for wind speed and direction.
4. **Run the Simulation**: Propagate these uncertainties through the PyWake model to compute `WS_eff`.
5. **Compute Sobol Sensitivity**: Calculate the Sobol sensitivity indices for `WS_eff`.
6. **Visualize and Save Results**: Create flow field images based on the sensitivity results and save them.

Hereâ€™s a Python script that accomplishes these tasks:

```python
import numpy as np
import matplotlib.pyplot as plt
from py_wake import np, WindFarm
from py_wake.site import UniformSite
from py_wake.flow_map import FlowMap
from py_wake.deficit_models import NoWake
from SALib.sample import saltelli
from SALib.analyze import sobol

# Define the problem for Sobol sensitivity analysis
problem = {
    'num_vars': 2,
    'names': ['wind_speed', 'wind_direction'],
    'bounds': [[8, 12], [0, 360]]  # Example bounds for wind speed (m/s) and wind direction (degrees)
}

# Generate Sobol samples
num_samples = 1000
param_values = saltelli.sample(problem, num_samples)

# Setup the wind farm and site
site = UniformSite(10)  # Example site with roughness length
wind_farm = WindFarm()  # Define your wind farm layout here

# Initialize lists to store results
WS_eff_results = []

# Run the simulations for each set of parameters
for wind_speed, wind_direction in param_values:
    # Set wind conditions
    wind_farm.set_wind_conditions(wind_speed=wind_speed, wind_direction=wind_direction)
    
    # Compute the flow field
    flow_map = FlowMap(wind_farm)
    WS_eff = flow_map.get_effective_wind_speed()  # Example function call
    
    WS_eff_results.append(WS_eff)

# Convert results to a NumPy array for analysis
WS_eff_results = np.array(WS_eff_results)

# Perform Sobol sensitivity analysis
sobol_indices = sobol.analyze(problem, WS_eff_results)

# Plotting and saving results
x = np.linspace(-500, 500, 100)  # Adjust x-coordinates as needed
y = np.linspace(-500, 500, 100)  # Adjust y-coordinates as needed
X, Y = np.meshgrid(x, y)

for i, (S1, S2) in enumerate(zip(sobol_indices['S1'], sobol_indices['S2'])):
    plt.figure(figsize=(10, 8))
    plt.contourf(X, Y, S1.reshape(len(x), len(y)), cmap='viridis', levels=20)
    plt.colorbar(label='Sobol Sensitivity Index')
    plt.title(f'Sobol Sensitivity of WS_eff at Time {i}')
    plt.xlabel('X Coordinate (m)')
    plt.ylabel('Y Coordinate (m)')
    plt.savefig(f'sobol_sensitivity_time_{i}.png')
    plt.close()
```

### Notes:
- Ensure that the `py_wake`, `SALib`, and `matplotlib` libraries are installed in your Python environment.
- Customize the `WindFarm` setup, including the layout of turbines and other parameters relevant to your use case.
- Adjust the grid size and bounds as necessary for your specific application and to ensure meaningful results.
- The script assumes a simple uniform site and basic wind farm setup; you may need to adapt this to fit your specific wind farm configuration.
- The Sobol sensitivity analysis in this script assumes that the outputs are dependent only on the wind speed and wind direction; additional variables can be included as needed.