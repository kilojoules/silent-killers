To generate a script that propagates realistic measurement uncertainties through PyWake and saves flow field images showing the Sobol sensitivity of the effective wind speed (WS_eff) as a function of x and y, follow the steps outlined below. This script assumes you have a working PyWake environment and the necessary libraries installed, such as NumPy and Matplotlib.

Here's a Python script to achieve this:

```python
import numpy as np
import matplotlib.pyplot as plt
from pywake import vdk
from pywake.site import UniformSite
from pywake.flow_map import FlowMap
from pywake.utils import SobolSensitivity
from pywake.deficit import Deficit
import os

# Parameters
n_samples = 100  # Number of Sobol samples
t_start = 0      # Start time for the simulation
t_end = 10       # End time for the simulation
time_steps = 10  # Number of time steps
x_range = (-500, 500)  # X range for flow field
y_range = (-500, 500)  # Y range for flow field

# Define the site and wind farm parameters
site = UniformSite(10)  # Mean wind speed at hub height in m/s
wind_farm = vdk.WindFarm(...)  # Define your wind farm layout and turbine characteristics

# Generate Sobol samples for input parameters
# Assuming input parameters we want to perturb are wind speed and turbulence intensity
sobol_samples = SobolSensitivity(n_samples=n_samples, n_inputs=2)

# Prepare directory to save flow field images
output_dir = "flow_field_images"
os.makedirs(output_dir, exist_ok=True)

# Loop through time steps
for t in np.linspace(t_start, t_end, time_steps):
    print(f"Processing time step: {t}")
    
    flow_fields = []
    
    for sample in sobol_samples:
        # Modify input parameters based on Sobol samples
        perturbation_ws = sample[0]  # Wind speed perturbation
        perturbation_ti = sample[1]   # Turbulence intensity perturbation

        # Simulate the flow field
        flow_map = FlowMap(
            wind_farm=wind_farm,
            site=site,
            wind_speed=site.mean_wind_speed + perturbation_ws,
            turbulence_intensity=0.1 + perturbation_ti  # Base turbulence intensity
        )
        
        # Calculate the effective wind speed
        ws_eff = flow_map.get_flow_field().WS_eff
        
        flow_fields.append(ws_eff)

    # Convert flow fields to a numpy array for analysis
    flow_fields = np.array(flow_fields)
    
    # Calculate Sobol sensitivity indices (mean and variance)
    mean_ws_eff = np.mean(flow_fields, axis=0)
    var_ws_eff = np.var(flow_fields, axis=0)
    
    # Create a grid for plotting
    x = np.linspace(x_range[0], x_range[1], 100)
    y = np.linspace(y_range[0], y_range[1], 100)
    X, Y = np.meshgrid(x, y)
    
    # Plot the mean and variance of WS_eff
    plt.figure(figsize=(12, 6))
    
    # Plot mean WS_eff
    plt.subplot(1, 2, 1)
    plt.contourf(X, Y, mean_ws_eff, levels=50, cmap='viridis')
    plt.title(f'Mean WS_eff at t={t:.2f}s')
    plt.colorbar(label='WS_eff (m/s)')
    plt.xlabel('X (m)')
    plt.ylabel('Y (m)')
    
    # Plot variance of WS_eff
    plt.subplot(1, 2, 2)
    plt.contourf(X, Y, var_ws_eff, levels=50, cmap='plasma')
    plt.title(f'Variance of WS_eff at t={t:.2f}s')
    plt.colorbar(label='Variance')
    plt.xlabel('X (m)')
    plt.ylabel('Y (m)')
    
    # Save the figure
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, f'flow_field_t{int(t)}.png'))
    plt.close()

print("Flow field images saved.")
```

### Notes:
1. **Customize Wind Farm and Site Parameters:**
   - Replace the `...` in `wind_farm = vdk.WindFarm(...)` with appropriate wind farm layout and turbine characteristics as required by your model.

2. **SobolSensitivity Implementation:**
   - Ensure that the `SobolSensitivity` function is implemented correctly to generate samples based on your uncertainty parameters.

3. **Plotting and Saving Images:**
   - The script generates contour plots for the mean and variance of the effective wind speed at each time step and saves them as PNG images.

4. **Testing and Validation:**
   - Run the script in a controlled environment to ensure the flow fields are generated as expected. Adjust the number of samples and time steps based on computational resources.

5. **Dependencies:**
   - Ensure PyWake and its dependencies are installed and properly configured.

Make sure to adapt this script to your specific use case, including any specific parameters or configurations needed for your analysis.