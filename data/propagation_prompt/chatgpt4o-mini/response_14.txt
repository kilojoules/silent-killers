To create a script that propagates realistic measurement uncertainties through PyWake and saves a series of flow field images showing the Sobol sensitivity of the effective wind speed (WS_eff) as a function of x and y, we will follow these main steps:

1. Set up the inflow conditions and define the uncertainty parameters.
2. Use the Sobol sensitivity analysis to quantify the effect of uncertainties on WS_eff.
3. Generate flow fields using PyWake.
4. Save the flow field images at different times.

Below is an example script that outlines these steps. You may need to adjust the parameters and functions according to your specific dataset and requirements.

```python
import numpy as np
import matplotlib.pyplot as plt
import pywake
from SALib.sample import saltelli
from SALib.analyze import sobol
import os

# Define the problem
problem = {
    'num_vars': 3,  # number of uncertain parameters
    'names': ['wind_speed', 'turbulence_intensity', 'wind_direction'],  # names of uncertain parameters
    'bounds': [[5, 15],   # wind speed range (m/s)
               [0.05, 0.15],  # turbulence intensity range
               [0, 360]]  # wind direction range (degrees)
}

# Generate samples using Saltelli's method
param_values = saltelli.sample(problem, 1000)

# Set up the PyWake simulation
def run_simulation(wind_speed, turbulence_intensity, wind_direction):
    # Create the inflow object
    inflow = pywake.inflow.Inflow()
    inflow.set_wind_speed(wind_speed)
    inflow.set_turbulence_intensity(turbulence_intensity)
    inflow.set_wind_direction(wind_direction)

    # Create a wake model
    model = pywake.WakeModel(inflow)

    # Calculate the effective wind speed (WS_eff)
    wseff = model.calculate_WS_eff()

    return wseff

# Store WS_eff results
ws_eff_results = np.zeros((param_values.shape[0], 100, 100))  # Assuming a 100x100 grid for flow field

# Run simulations for each set of parameters
for i, params in enumerate(param_values):
    wind_speed, turbulence_intensity, wind_direction = params
    ws_eff_results[i] = run_simulation(wind_speed, turbulence_intensity, wind_direction)

# Sobol sensitivity analysis
sobol_indices = sobol.analyze(problem, ws_eff_results, print_to_console=True)

# Create output directory
output_dir = 'flow_field_images'
os.makedirs(output_dir, exist_ok=True)

# Generate flow field images
for time_index in range(ws_eff_results.shape[1]):  # Assuming time is indexed by the second dimension
    plt.figure(figsize=(10, 8))
    plt.imshow(ws_eff_results[:, time_index, :], extent=(0, 100, 0, 100), origin='lower', aspect='auto')
    plt.colorbar(label='WS_eff (m/s)')
    plt.title(f'Flow Field at Time Step {time_index}')
    plt.xlabel('X Position (m)')
    plt.ylabel('Y Position (m)')
    plt.savefig(os.path.join(output_dir, f'flow_field_time_{time_index}.png'))
    plt.close()

# Optionally, save Sobol indices to a file
np.savetxt('sobol_indices.txt', sobol_indices['S1'], header='Sobol Indices')

print("Flow field images saved and Sobol indices calculated.")
```

### Explanation of the Script:

1. **Problem Definition**: We define a problem with three uncertain parameters (wind speed, turbulence intensity, wind direction) and their respective ranges.

2. **Sampling**: We use Saltelli's sampling method from the `SALib` library to generate samples of the uncertain parameters.

3. **Simulation**: For each set of parameters, we run a PyWake simulation to calculate the effective wind speed (WS_eff) across a defined grid.

4. **Sensitivity Analysis**: We perform Sobol sensitivity analysis using the `SALib` library to quantify the sensitivity of WS_eff to the uncertain parameters.

5. **Image Generation**: We generate and save flow field images at different time steps, visualizing the WS_eff across the grid.

6. **Output**: The script creates an output directory for images and saves the Sobol indices to a text file.

### Note:
- Make sure to adjust the PyWake functions according to your specific version and implementation.
- You may need to install the required libraries if you haven't already (e.g., PyWake, NumPy, Matplotlib, SALib).

Feel free to customize the script based on your specific requirements and data.