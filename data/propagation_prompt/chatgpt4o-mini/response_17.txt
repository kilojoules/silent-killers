To create a script that propagates realistic measurement uncertainties through PyWake and saves a series of flow field images showing the Sobol sensitivity of effective wind speed (WS_eff) as a function of x and y, you'll need to follow several steps. Below is a Python script that outlines this procedure:

### Requirements:
Make sure you have the following libraries installed:
- PyWake
- NumPy
- Matplotlib
- SALib (for Sobol sensitivity analysis)

### Script

```python
import numpy as np
import matplotlib.pyplot as plt
from pywake import *
from pywake.examples import jw2013
from SALib.analyze import sobol
from SALib.sample import saltelli
import os

# Define the problem for Sobol sensitivity analysis
def define_problem():
    problem = {
        'num_vars': 2,
        'names': ['wind_speed', 'turbulence_intensity'],
        'bounds': [[5, 15], [0.01, 0.1]]
    }
    return problem

# Function to run PyWake simulation
def run_pywake_simulation(wind_speed, turbulence_intensity):
    # Load your site and turbine model
    site = jw2013.jw2013_site()  # or your own site model
    wind_turbine = jw2013.jw2013_turbine()  # or your own turbine model

    # Set up the wind farm layout
    layout = np.array([[0, 0], [500, 0], [1000, 0]])  # Example layout
    farm = WindFarm(layout, wind_turbine)

    # Run the simulation with specified wind conditions
    flow = farm.get_flow(site, wind_speed, turbulence_intensity)
    return flow

# Function to propagate uncertainties and perform Sobol analysis
def propagate_uncertainties(problem):
    # Generate samples
    param_values = saltelli.sample(problem, 1000)

    # Store results
    results = np.zeros(param_values.shape[0])

    for i, (wind_speed, turbulence_intensity) in enumerate(param_values):
        flow = run_pywake_simulation(wind_speed, turbulence_intensity)
        results[i] = flow.WS_eff.mean()  # Example of effective wind speed

    return results

# Function to analyze Sobol sensitivity
def analyze_sobol(results, problem):
    Si = sobol.analyze(problem, results)
    return Si

# Function to plot and save results
def plot_and_save_sensitivity(Si, output_dir):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Create a grid for the sensitivity analysis plot
    x = np.linspace(-1000, 1500, 100)  # x-coordinates
    y = np.linspace(-500, 500, 100)    # y-coordinates
    X, Y = np.meshgrid(x, y)

    # Plot Sobol sensitivity indices
    plt.figure(figsize=(12, 6))
    plt.contourf(X, Y, Si['S1'].reshape(X.shape), levels=50, cmap='viridis')
    plt.colorbar(label='Sobol Sensitivity Index')
    plt.title('Sobol Sensitivity of WS_eff')
    plt.xlabel('X Position (m)')
    plt.ylabel('Y Position (m)')
    
    # Save the plot
    plt.savefig(os.path.join(output_dir, 'sobol_sensitivity.png'))
    plt.close()

# Main function to execute the script
def main():
    output_dir = 'flow_field_images'
    problem = define_problem()
    results = propagate_uncertainties(problem)
    Si = analyze_sobol(results, problem)
    plot_and_save_sensitivity(Si, output_dir)

if __name__ == "__main__":
    main()
```

### Explanation:
1. **Define the Sobol Problem**: The `define_problem()` function specifies the parameters for sensitivity analysis (e.g., wind speed and turbulence intensity).

2. **Run PyWake Simulation**: The `run_pywake_simulation()` function sets up the PyWake environment, simulating the wind farm's flow given specific wind conditions.

3. **Propagate Uncertainties**: The `propagate_uncertainties()` function generates samples using the Saltelli method and runs simulations for each set of parameters.

4. **Analyze Sobol Sensitivity**: The `analyze_sobol()` function computes the Sobol sensitivity indices from the simulation results.

5. **Plot and Save Results**: The `plot_and_save_sensitivity()` function creates contour plots of the sensitivity indices and saves them as images.

6. **Main Function**: The `main()` function orchestrates the script's execution.

### Notes:
- You should adjust the site and turbine models according to your specific use case.
- The layout of the wind farm (`layout` variable) should be defined based on your wind turbine layout.
- Adjust the ranges and number of samples in the Sobol analysis as necessary for your application.