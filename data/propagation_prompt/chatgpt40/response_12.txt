To propagate measurement uncertainties through PyWake and generate flow field images showing the Sobol sensitivity of the effective wind speed (\(WS_{eff}\)) as a function of \(x\) and \(y\), we'll need to follow these steps:

1. **Define the Uncertainty Model**: Specify the uncertainties in your input parameters, such as wind speed, direction, and any other relevant parameters.

2. **Set Up the PyWake Simulation**: Configure your wind farm and flow model in PyWake.

3. **Perform Uncertainty Propagation**: Use a method like Monte Carlo simulation or Polynomial Chaos Expansion to propagate input uncertainties through the model.

4. **Calculate Sobol Sensitivity Indices**: Analyze the impact of each uncertain parameter on the \(WS_{eff}\) using Sobol sensitivity analysis.

5. **Generate and Save Flow Field Images**: Visualize the sensitivity of \(WS_{eff}\) as a function of \(x\) and \(y\) at different times, and save these images.

Here's a basic script outline to achieve this:

```python
import numpy as np
import matplotlib.pyplot as plt
from py_wake import WindFarmModel
from py_wake.examples.data.hornsrev1 import Hornsrev1Site, HornsrevV80
from SALib.sample import saltelli
from SALib.analyze import sobol

# Step 1: Define the uncertainty model
problem = {
    'num_vars': 3,
    'names': ['wind_speed', 'wind_direction', 'turbulence_intensity'],
    'bounds': [[5, 15],  # Wind speed range in m/s
               [0, 360], # Wind direction range in degrees
               [0.05, 0.2]] # Turbulence intensity range
}

# Generate samples
param_values = saltelli.sample(problem, 1000)

# Step 2: Set up the PyWake simulation
site = Hornsrev1Site()
wind_turbines = HornsrevV80()
wf_model = WindFarmModel(site, wind_turbines)

# Prepare arrays to store results
num_samples = param_values.shape[0]
WS_eff_results = np.zeros((num_samples, site.ds.shape[0], site.ds.shape[1]))

# Step 3: Perform uncertainty propagation
for i, params in enumerate(param_values):
    wind_speed, wind_direction, turbulence_intensity = params
    # Update site conditions
    site.ds['WS'] = wind_speed
    site.ds['WD'] = wind_direction
    site.ds['TI'] = turbulence_intensity
    
    # Run the model
    sim_res = wf_model(site, wind_turbines)
    WS_eff_results[i] = sim_res.WS_eff

# Step 4: Calculate Sobol sensitivity indices
Si = sobol.analyze(problem, WS_eff_results.mean(axis=(1, 2)))

# Step 5: Generate and save flow field images
x = site.ds['x']
y = site.ds['y']

for i, param in enumerate(problem['names']):
    plt.figure(figsize=(10, 8))
    plt.title(f'Sobol Sensitivity of WS_eff to {param}')
    plt.pcolormesh(x, y, Si['S1'][i].reshape(x.shape), shading='auto', cmap='viridis')
    plt.colorbar(label='Sensitivity Index')
    plt.xlabel('x (m)')
    plt.ylabel('y (m)')
    plt.savefig(f'sobol_sensitivity_{param}.png')
    plt.close()

print("Flow field images saved successfully.")
```

### Key Points:
- **Uncertainty Model**: The `problem` dictionary defines your uncertain parameters and their ranges.
- **Sampling**: `saltelli.sample` generates samples for the Sobol analysis.
- **PyWake Simulation**: The script runs PyWake simulations for each sample.
- **Sensitivity Analysis**: `sobol.analyze` calculates Sobol sensitivity indices.
- **Visualization**: The results are visualized and saved as images.

Please ensure you have PyWake, SALib, and other dependencies installed in your Python environment before running this script. Adjust the input parameter ranges, wind farm setup, and the number of samples as needed for your specific application.