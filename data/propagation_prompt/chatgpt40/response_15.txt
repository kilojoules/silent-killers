To create a script that propagates realistic measurement uncertainties through PyWake and generates a series of flow field images showing the sensitivity of the flow to the inflow, follow these steps. We'll use Sobol sensitivity analysis to assess the sensitivity of the effective wind speed (WS_eff) as a function of the spatial coordinates \(x\) and \(y\). This process involves setting up a PyWake simulation, introducing uncertainties, performing sensitivity analysis, and visualizing the results.

Here's a conceptual script outline to guide you through this process:

```python
import numpy as np
import matplotlib.pyplot as plt
from py_wake import WindFarmModel
from py_wake.examples.data.hornsrev1 import Hornsrev1Site, HornsrevV80
from SALib.sample import saltelli
from SALib.analyze import sobol
from py_wake.wind_turbines import WindTurbines
from py_wake.site import UniformSite

# Define the problem for Sobol sensitivity analysis
problem = {
    'num_vars': 2,
    'names': ['wind_speed', 'wind_direction'],
    'bounds': [[6, 12], [0, 360]]
}

# Generate samples
param_values = saltelli.sample(problem, 1000)

# Initialize the wind farm model
site = Hornsrev1Site()
windTurbines = HornsrevV80()
wf_model = WindFarmModel(site=site, windTurbines=windTurbines)

# Define a function to run the model and return WS_eff
def evaluate(params):
    wind_speed, wind_direction = params
    site = UniformSite([wind_speed], ti=0.1)
    simulation_result = wf_model(x=[0], y=[0], wd=[wind_direction], ws=[wind_speed])
    WS_eff = simulation_result.WS_eff
    return WS_eff

# Evaluate model outputs
Y = np.array([evaluate(params) for params in param_values])

# Perform Sobol sensitivity analysis
Si = sobol.analyze(problem, Y)

# Generate flow field images showing sensitivity
x_range = np.linspace(-500, 500, 100)
y_range = np.linspace(-500, 500, 100)
X, Y = np.meshgrid(x_range, y_range)
sensitivity_map = np.zeros_like(X)

# Calculate WS_eff sensitivity for each point in the grid
for i in range(X.shape[0]):
    for j in range(X.shape[1]):
        # Placeholder for WS_eff sensitivity calculation at (X[i, j], Y[i, j])
        # This will involve evaluating the wind farm model at each grid point
        sensitivity_map[i, j] = np.random.rand()  # Replace with actual sensitivity calculation

# Plot the sensitivity map
plt.figure(figsize=(10, 8))
plt.contourf(X, Y, sensitivity_map, cmap='viridis')
plt.colorbar(label='Sensitivity of WS_eff')
plt.title('Sobol Sensitivity of WS_eff as a function of (x, y)')
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.savefig('sensitivity_map.png')
plt.show()
```

### Key Steps Explained:

1. **Define the Problem:** Set up the problem for Sobol sensitivity analysis with variables for wind speed and wind direction.
2. **Generate Samples:** Use Saltelli's sampling method to generate parameter samples.
3. **Initialize the Model:** Create a wind farm model using PyWake with a site and wind turbines.
4. **Evaluate the Model:** Define a function to evaluate the effective wind speed (WS_eff) given wind speed and direction.
5. **Perform Sensitivity Analysis:** Use Sobol analysis to quantify the sensitivity of WS_eff to the input parameters.
6. **Visualize Results:** Create a grid over the area of interest and calculate the sensitivity at each grid point. Plot the results as a heatmap.

Please adapt this script according to your specific requirements and the actual implementation of WS_eff sensitivity calculation in your PyWake model, as the placeholder section should be replaced with your actual sensitivity computation logic.