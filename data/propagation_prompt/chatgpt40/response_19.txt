To generate a script that propagates realistic measurement uncertainties through PyWake and saves a series of flow field images showing the sensitivity of the flow at different times to the inflow, you will need to follow these general steps:

1. **Setup and Import Libraries**: Ensure you have the necessary libraries installed and imported, including PyWake and any libraries for uncertainty propagation and sensitivity analysis, such as `SALib`.

2. **Define the Wind Farm and Wind Conditions**: Set up your wind farm model in PyWake and define the wind conditions with uncertainties.

3. **Propagate Uncertainties**: Use techniques such as Monte Carlo simulations or other probabilistic methods to propagate uncertainties through your model.

4. **Perform Sensitivity Analysis**: Utilize the Sobol sensitivity analysis method to determine the sensitivity of the effective wind speed (WS_eff) as a function of spatial coordinates x and y.

5. **Generate and Save Flow Field Images**: Create visualizations of the flow field with sensitivity overlays and save them as images.

Here's a basic script outline to achieve this:

```python
import numpy as np
import matplotlib.pyplot as plt
from py_wake.examples.data.hornsrev1 import HornsrevV80
from py_wake.wind_turbines import WindTurbines
from py_wake.site import UniformSite
from py_wake import NOJ
from SALib.sample import saltelli
from SALib.analyze import sobol

# Define your wind farm model
wind_turbines = HornsrevV80()
site = UniformSite(p_wd=[1], ti=0.075)

# Initialize the NOJ wake model
wake_model = NOJ(site, wind_turbines)

# Define problem for Sobol analysis
problem = {
    'num_vars': 2,
    'names': ['wind_speed', 'wind_direction'],
    'bounds': [[3, 25], [0, 360]]
}

# Generate samples for uncertainty propagation
param_values = saltelli.sample(problem, 1000)

# Function to evaluate model
def evaluate_model(params):
    wind_speed, wind_direction = params
    flow_map = wake_model(x=[0], y=[0], wd=[wind_direction], ws=[wind_speed])
    WS_eff = flow_map.WS_eff().squeeze()  # Effective wind speed
    return WS_eff

# Run model evaluations
Y = np.array([evaluate_model(params) for params in param_values])

# Perform Sobol sensitivity analysis
sobol_indices = sobol.analyze(problem, Y)

# Visualize and save results
x = np.linspace(0, 5000, 100)
y = np.linspace(0, 5000, 100)
xx, yy = np.meshgrid(x, y)

# Assuming sensitivity is uniform across the grid for simplicity
sensitivity = np.full(xx.shape, sobol_indices['S1'][0])  # Example with first-order index of wind_speed

# Plot the sensitivity field
plt.figure(figsize=(10, 8))
plt.contourf(xx, yy, sensitivity, cmap='viridis')
plt.colorbar(label='Sensitivity Index')
plt.title('Sobol Sensitivity of WS_eff')
plt.xlabel('x (m)')
plt.ylabel('y (m)')
plt.savefig('sensitivity_field.png')
plt.show()
```

### Key Points:

- **Wind Farm Model**: Replace the `HornsrevV80` and `UniformSite` with your specific wind farm and site if needed.
- **Uncertainty Propagation**: The example uses Saltelli sampling for Sobol analysis, which is common for global sensitivity analysis.
- **Sobol Analysis**: This script computes the first-order Sobol indices. You might want to explore total or second-order indices depending on your needs.
- **Visualization**: The script uses a simple contour plot for visualization. You might need to adapt this to better suit your scenario and to save images at different timesteps or conditions.

Ensure you have all necessary libraries installed and adapt the script's parameters to fit the specifics of your project and data.