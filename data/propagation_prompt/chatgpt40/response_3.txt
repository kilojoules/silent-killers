Creating a script that propagates measurement uncertainties through PyWake and generates flow field images showing the sensitivity of the flow at different times involves several steps. Below is a general outline of how you could implement this, using Python with PyWake and Sobol sensitivity analysis. This script is illustrative and assumes you have the necessary data and environment set up (e.g., wind farm data, measurement uncertainties, etc.).

Before you start, ensure you have the required packages installed:

```bash
pip install pywake SALib matplotlib numpy
```

Here's a basic script:

```python
import numpy as np
import matplotlib.pyplot as plt
from py_wake.examples.data.hornsrev1 import Hornsrev1Site, V80
from py_wake import NOJ
from SALib.sample import saltelli
from SALib.analyze import sobol

# Define your problem for Sobol analysis
problem = {
    'num_vars': 2,
    'names': ['wind_speed', 'wind_direction'],
    'bounds': [[4, 25], [0, 360]]
}

# Generate samples
param_values = saltelli.sample(problem, 1000)

# Initialize the site and wind turbine model
site = Hornsrev1Site()
windTurbines = V80()

# Define the wind farm model
wake_model = NOJ(site, windTurbines)

# Prepare to store results
WS_eff_results = []

# Loop through the samples and compute the WS_eff for each
for params in param_values:
    wind_speed, wind_direction = params
    simulation_result = wake_model(x=[0], y=[0], h=[70], wd=[wind_direction], ws=[wind_speed])
    WS_eff = simulation_result.WS_eff_ilk.mean()
    WS_eff_results.append(WS_eff)

# Convert results to numpy array for analysis
WS_eff_results = np.array(WS_eff_results)

# Perform Sobol sensitivity analysis
Si = sobol.analyze(problem, WS_eff_results, print_to_console=True)

# Plotting the sensitivity indices
x = np.linspace(0, site.boundary[0][1], 100)
y = np.linspace(0, site.boundary[1][1], 100)
X, Y = np.meshgrid(x, y)

# Create a figure to visualize sensitivity
fig, ax = plt.subplots(len(Si['S1']), figsize=(10, 20))
for i, (s1, s2) in enumerate(zip(Si['S1'], Si['S2'])):
    ax[i].set_title(f"Parameter: {problem['names'][i]}")
    ax[i].contourf(X, Y, np.full_like(X, s1), cmap='viridis', levels=np.linspace(0, 1, 11))
    ax[i].set_xlabel('X (m)')
    ax[i].set_ylabel('Y (m)')

plt.tight_layout()
plt.savefig('sobol_sensitivity.png')
plt.show()
```

### Explanation:

1. **Sobol Sensitivity Analysis**: 
   - We define the problem with parameters `wind_speed` and `wind_direction` and their respective bounds.
   - We use the `saltelli.sample` method to generate samples.

2. **Modeling with PyWake**:
   - We initialize the wind farm site and turbine models using PyWake's Hornsrev1Site and V80 turbine.
   - We use the NOJ (N.O. Jensen) wake model for simulation.

3. **Simulation**:
   - For each sample of wind speed and direction, we run the wake model and calculate the effective wind speed (`WS_eff`).

4. **Sensitivity Analysis**:
   - We perform Sobol sensitivity analysis on the results using the `sobol.analyze` method from the SALib package.
   - The sensitivity indices are visualized on a series of contour plots.

5. **Plotting**:
   - The script generates and saves a plot showing the sensitivity indices across the flow field.

Please adjust paths, turbine positions, and other parameters according to your specific setup and data.