Your code appears to be a complex wind farm modeling and optimization script using the PyWake framework. Below are some thoughts on your approach and suggestions for improvement.

### Positive Aspects:
1. **Modularity**: You’ve structured the code to separate the evaluation of the RMSE and the optimization process, which is beneficial for readability and maintainability.
2. **Use of Libraries**: You're utilizing powerful libraries like PyWake, NumPy, and Xarray, which are well-suited for the tasks at hand.
3. **Flexibility with Models**: You have a well-defined mechanism for switching between different models and settings based on user-defined parameters (e.g., `MODEL`, `DOWNWIND`).
4. **Visualization**: There's a clear effort to visualize results and optimization progress, which is crucial for understanding model performance.

### Areas for Improvement:
1. **Code Modularity**: Your request to modularize the instantiation of the wind farm model (wfm) is a good one. Breaking down large functions into smaller, more focused ones can enhance readability and reusability. Each function can handle a specific task, such as parameter setup, simulation execution, or RMSE evaluation.
  
2. **Flow Field Plots**: As you mentioned, modifying the flow field plots to include average and P90 error reporting would provide more insights into your results. You can compute these metrics using NumPy functions and overlay them on the flow field plots.

3. **Error Handling**: Consider adding more robust error handling, especially when loading datasets or performing simulations. This can help in debugging and ensure that the code fails gracefully.

4. **Documentation and Comments**: While there are some comments, additional documentation explaining the purpose of functions and key sections of the code would improve understandability for others (or yourself in the future).

5. **Code Duplication**: There are sections with repeated patterns, particularly in setting up models and parameters based on the chosen configuration. Consider creating helper functions to avoid code repetition.

6. **Parameter Management**: The use of dictionaries for parameters can make your code cleaner. Instead of defining multiple variables for the parameters, consider using a single dictionary to hold all parameters and pass it around as needed.

### Suggested Modular Approach:
Here’s a high-level outline of how you might refactor your code:

```python
def load_data(file_path):
    """Load the dataset."""
    return xr.load_dataset(file_path)

def setup_wind_farm(site, turbine, model_params, blockage_params):
    """Instantiate the wind farm model with specified parameters."""
    return All2AllIterative(site, turbine,
                            wake_deficitModel=model_params['wake_deficitModel'],
                            superpositionModel=LinearSum(),
                            deflectionModel=None,
                            turbulenceModel=CrespoHernandez(**model_params['turbulence']),
                            blockage_deficitModel=SelfSimilarityDeficit2020(**blockage_params))

def run_simulation(wfm, full_ws, full_ti):
    """Run the wind farm simulation."""
    return wfm([0], [0], ws=full_ws, TI=full_ti, wd=[270] * full_ti.size, time=True)

def calculate_rmse(all_obs, pred):
    """Calculate RMSE between observed and predicted values."""
    return float(np.sqrt(((all_obs - pred) ** 2).mean(['x', 'y'])).mean('time'))

def plot_flow_field(target_x, target_y, observed_deficit, pred, diff):
    """Plot flow fields and save figures."""
    fig, ax = plt.subplots(3, 1, figsize=(5, 15))
    # Codes for plotting...
    plt.savefig(f'figs/downsream_err_{t}')
    plt.clf()

# Main execution flow
dat = load_data('./DTU10MW.nc')
# Continue with the rest of your logic...
```

This modular approach will help you manage the complexity and make it easier to test and debug individual components. If you decide to implement changes, be sure to maintain the existing functionality related to deficit settings, MODEL, and UPSTREAM logic as you mentioned. 

Let me know if you would like further details or specific implementations!