Looking at your code, I think your approach is solid but you're right that it needs better modularization and the flow field analysis could be improved. Here's a complete rewrite that addresses these issues:

```python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import xarray as xr
from py_wake.rotor_avg_models.gaussian_overlap_model import GaussianOverlapAvgModel
from py_wake.deficit_models.gaussian import TurboGaussianDeficit
from py_wake.examples.data.dtu10mw._dtu10mw import DTU10MW
from py_wake.deficit_models.gaussian import BlondelSuperGaussianDeficit2020
from py_wake import HorizontalGrid
from py_wake.deflection_models import JimenezWakeDeflection
from py_wake.turbulence_models import CrespoHernandez
from py_wake.rotor_avg_models import RotorCenter
from py_wake.deficit_models import SelfSimilarityDeficit2020
from py_wake.wind_farm_models import PropagateDownwind, All2AllIterative
from py_wake.superposition_models import LinearSum
from py_wake.ground_models import Mirror
from py_wake.examples.data.hornsrev1 import Hornsrev1Site
from bayes_opt import BayesianOptimization
from py_wake.deficit_models.utils import ct2a_mom1d

class WakeModelOptimizer:
    def __init__(self, model_type=1, upstream=False):
        """
        Initialize the wake model optimizer
        
        Args:
            model_type (int): 1 for BlondelSuperGaussian/TurboGaussian, 2 for alternative configs
            upstream (bool): True for upstream (blockage), False for downstream (wake)
        """
        self.model_type = model_type
        self.upstream = upstream
        self.downwind = not upstream
        
        # Load data and setup
        self._load_data()
        self._setup_conditions()
        self._setup_bounds_and_defaults()
        
        # Initialize site and turbine
        self.site = Hornsrev1Site()
        self.turbine = DTU10MW()
        
    def _load_data(self):
        """Load and process the reference dataset"""
        self.dat = xr.load_dataset('./DTU10MW.nc')
        self.turbine_temp = DTU10MW()
        D = self.turbine_temp.diameter()
        self.D = D
        self.dat = self.dat.assign_coords(x=self.dat.x * D, y=self.dat.y * D)
        
        # Define region of interest based on upstream/downstream
        if self.downwind:
            X_LB, X_UB = 2, 10
        else:
            X_LB, X_UB = -2, -1
            
        self.X_LB, self.X_UB = X_LB, X_UB
        roi_x = slice(X_LB * D, X_UB * D)
        roi_y = slice(-2 * D, 2 * D)
        
        self.flow_roi = self.dat.sel(x=roi_x, y=roi_y)
        self.target_x = self.flow_roi.x
        self.target_y = self.flow_roi.y
        
    def _setup_conditions(self):
        """Setup wind speed and turbulence intensity conditions"""
        TIs = np.arange(0.05, 0.45, 0.05)
        WSs = np.arange(4, 11)
        
        full_ti = [TIs for _ in range(WSs.size)]
        self.full_ti = np.array(full_ti).flatten()
        
        full_ws = [[WSs[ii]] * TIs.size for ii in range(WSs.size)]
        self.full_ws = np.array(full_ws).flatten()
        
        assert self.full_ws.size == self.full_ti.size
        
    def _setup_bounds_and_defaults(self):
        """Setup parameter bounds and defaults based on model configuration"""
        if self.model_type == 1:
            if self.downwind:
                self.pbounds = {
                    'a_s': (0.001, 0.5), 'b_s': (0.001, 0.01), 'c_s': (0.001, 0.5),
                    'b_f': (-2, 1), 'c_f': (0.1, 5),
                    'ch1': (-1, 2), 'ch2': (-1, 2), 'ch3': (-1, 2), 'ch4': (-1, 2),
                }
                self.defaults = {
                    'a_s': 0.17, 'b_s': 0.005, 'c_s': 0.2, 'b_f': -0.68, 'c_f': 2.41,
                    'ch1': 0.73, 'ch2': 0.8325, 'ch3': -0.0325, 'ch4': -0.32
                }
            else:
                self.pbounds = {
                    'ss_alpha': (0.05, 3), 'ss_beta': (0.05, 3),
                    'rp1': (-2, 2), 'rp2': (-2, 2),
                    'ng1': (-3, 3), 'ng2': (-3, 3), 'ng3': (-3, 3), 'ng4': (-3, 3),
                    'fg1': (-2, 2), 'fg2': (-2, 2), 'fg3': (-2, 2), 'fg4': (-2, 2)
                }
                self.defaults = {
                    'ss_alpha': 0.8888888888888888, 'ss_beta': 1.4142135623730951,
                    'rp1': -0.672, 'rp2': 0.4897,
                    'ng1': -1.381, 'ng2': 2.627, 'ng3': -1.524, 'ng4': 1.336,
                    'fg1': -0.06489, 'fg2': 0.4911, 'fg3': 1.116, 'fg4': -0.1577
                }
        else:  # model_type == 2
            self.pbounds = {
                'A': (0.001, .5), 'cti1': (.01, 5), 'cti2': (0.01, 5),
                'ceps': (0.01, 3), 'ctlim': (0.01, 1),
                'ch1': (-1, 2), 'ch2': (-1, 2), 'ch3': (-1, 2), 'ch4': (-1, 2),
            }
            self.defaults = {
                'A': 0.04, 'cti1': 1.5, 'cti2': 0.8, 'ceps': 0.25, 'ctlim': 0.999,
                'ch1': 0.73, 'ch2': 0.8325, 'ch3': -0.0325, 'ch4': -0.3
            }
            
    def _create_wfm(self, **kwargs):
        """Create wind farm model with given parameters"""
        if self.downwind:
            if self.model_type == 1:
                def_args = {k: kwargs[k] for k in ['a_s', 'b_s', 'c_s', 'b_f', 'c_f']}
                wake_deficitModel = BlondelSuperGaussianDeficit2020(**def_args)
            else:
                wake_deficitModel = TurboGaussianDeficit(
                    A=kwargs['A'], 
                    cTI=[kwargs['cti1'], kwargs['cti2']],
                    ctlim=kwargs['ctlim'], 
                    ceps=kwargs['ceps'],
                    ct2a=ct2a_mom1d,
                    groundModel=Mirror(),
                    rotorAvgModel=GaussianOverlapAvgModel()
                )
                wake_deficitModel.WS_key = 'WS_jlk'
            
            turb_args = {'c': np.array([kwargs['ch1'], kwargs['ch2'], kwargs['ch3'], kwargs['ch4']])}
            blockage_args = {}
            
        else:  # upstream
            wake_deficitModel = BlondelSuperGaussianDeficit2020()
            turb_args = {}
            blockage_args = {
                'ss_alpha': kwargs['ss_alpha'], 
                'ss_beta': kwargs['ss_beta'], 
                'r12p': np.array([kwargs['rp1'], kwargs['rp2']]), 
                'ngp': np.array([kwargs['ng1'], kwargs['ng2'], kwargs['ng3'], kwargs['ng4']])
            }
            if self.model_type == 2:
                blockage_args['groundModel'] = Mirror()
        
        return All2AllIterative(
            self.site, self.turbine,
            wake_deficitModel=wake_deficitModel,
            superpositionModel=LinearSum(), 
            deflectionModel=None,
            turbulenceModel=CrespoHernandez(**turb_args),
            blockage_deficitModel=SelfSimilarityDeficit2020(**blockage_args)
        )
    
    def _prepare_reference_data(self):
        """Prepare reference data for comparison"""
        # Create baseline simulation for reference
        baseline_wfm = self._create_wfm(**self.defaults)
        baseline_sim = baseline_wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                                   wd=[270] * self.full_ti.size, time=True)
        
        obs_values = []
        for t in range(baseline_sim.time.size):
            this_pred_sim = baseline_sim.isel(time=t, wt=0)
            observed_deficit = self.flow_roi.deficits.interp(
                ct=this_pred_sim.CT, ti=this_pred_sim.TI, z=0
            )
            obs_values.append(observed_deficit.T)
        
        self.all_obs = xr.concat(obs_values, dim='time')
    
    def evaluate_rmse(self, **kwargs):
        """Evaluate RMSE for given parameters"""
        try:
            wfm = self._create_wfm(**kwargs)
            sim_res = wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                         wd=[270] * self.full_ti.size, time=True)
            
            # Calculate flow map more efficiently
            flow_maps = []
            for tt in range(self.full_ws.size):
                fm = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y), 
                                    time=[tt])['WS_eff']
                flow_maps.append(fm)
            
            flow_map = xr.concat(flow_maps, dim='time')
            
            # Convert velocities to deficits
            pred = (sim_res.WS - flow_map.isel(h=0)) / sim_res.WS
            
            rmse = float(np.sqrt(((self.all_obs - pred) ** 2).mean(['x', 'y'])).mean('time'))
            
            if np.isnan(rmse): 
                return -0.5
            return -rmse
            
        except Exception as e:
            print(f"Error in evaluation: {e}")
            return -0.5
    
    def optimize(self, init_points=50, n_iter=200):
        """Run Bayesian optimization"""
        self._prepare_reference_data()
        
        self.optimizer = BayesianOptimization(
            f=self.evaluate_rmse, 
            pbounds=self.pbounds, 
            random_state=1
        )
        
        self.optimizer.probe(params=self.defaults, lazy=True)
        self.optimizer.maximize(init_points=init_points, n_iter=n_iter)
        
        self.best_params = self.optimizer.max['params']
        self.best_rmse = -self.optimizer.max['target']
        
        return self.best_params, self.best_rmse
    
    def create_animation(self, filename=None):
        """Create optimization animation"""
        if filename is None:
            filename = f'optimization_animation_{self.X_LB}_{self.X_UB}.mp4'
            
        def update_plot(frame):
            ax1.clear()
            ax2.clear()
            
            best_so_far_params = {}
            best_so_far_rmse = float('inf')
            best_so_far_rmses = []
            
            for i in range(frame + 1):
                if -self.optimizer.space.target[i] <= best_so_far_rmse:
                    best_so_far_rmse = -self.optimizer.space.target[i]
                    best_so_far_params = self.optimizer.res[i]['params']
                best_so_far_rmses.append(best_so_far_rmse)
            
            # Plot convergence
            ax1.plot(-np.array(self.optimizer.space.target), color='gray', alpha=0.5)
            ax1.plot(np.array(best_so_far_rmses), color='black')
            ax1.set_title('Optimization Convergence')
            ax1.set_xlabel('Iteration')
            ax1.set_ylabel('RMSE')
            ax1.grid(True)
            
            # Plot parameters
            keys = list(best_so_far_params.keys())
            best_vals = [best_so_far_params[key] for key in keys]
            default_vals = [self.defaults[key] for key in keys]
            
            ax2.bar(keys, best_vals, label='Optimized')
            ax2.bar(keys, default_vals, edgecolor='black', linewidth=2, 
                   color='none', capstyle='butt', label='Default')
            ax2.set_title(f'Best RMSE: {best_so_far_rmse:.4f}')
            ax2.tick_params(axis='x', rotation=45)
            ax2.legend()
            plt.tight_layout()
            return ax1, ax2
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        ani = animation.FuncAnimation(fig, update_plot, 
                                    frames=len(self.optimizer.space.target), repeat=False)
        
        writer = animation.FFMpegWriter(fps=15)
        ani.save(filename, writer=writer)
        plt.close('all')
    
    def analyze_flow_fields(self, save_figs=True):
        """Analyze flow fields with improved error reporting"""
        wfm = self._create_wfm(**self.best_params)
        sim_res = wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                     wd=[270] * self.full_ti.size, time=True)
        
        # Calculate flow maps
        flow_maps = []
        for tt in range(self.full_ws.size):
            fm = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y), 
                                time=[tt])['WS_eff']
            flow_maps.append(fm)
        
        flow_map = xr.concat(flow_maps, dim='time')
        
        rmse_values = []
        mae_values = []  # Mean Absolute Error
        all_errors = []
        
        for t in range(flow_map.time.size):
            this_pred_sim = sim_res.isel(time=t)
            observed_deficit = self.flow_roi.deficits.interp(
                ct=this_pred_sim.CT.isel(wt=0), ti=this_pred_sim.TI.isel(wt=0), z=0
            )
            
            # Convert velocity to deficit
            pred = (this_pred_sim.WS.isel(wt=0) - flow_map.isel(h=0, time=t)) / this_pred_sim.WS.isel(wt=0)
            diff = observed_deficit.T - pred
            
            rmse = np.sqrt(np.mean(diff**2))
            mae = np.mean(np.abs(diff))
            
            rmse_values.append(rmse)
            mae_values.append(mae)
            all_errors.append(diff.values.flatten())
            
            if save_figs:
                fig, ax = plt.subplots(3, 1, figsize=(5, 15))
                
                co = ax[0].contourf(self.target_x, self.target_y, observed_deficit.T)
                cp = ax[1].contourf(self.target_x, self.target_y, pred)
                cd = ax[2].contourf(self.target_x, self.target_y, diff)
                
                for jj, c in enumerate([co, cp, cd]):
                    fig.colorbar(c, ax=ax[jj])
                
                ax[0].set_title(f'Observed (t={t})')
                ax[1].set_title(f'Prediction (t={t})')
                ax[2].set_title(f'Difference (t={t})')
                
                plt.tight_layout()
                plt.savefig(f'figs/flow_field_err_{t}.png', dpi=150, bbox_inches='tight')
                plt.close()
        
        # Calculate summary statistics
        all_errors_flat = np.concatenate(all_errors)
        
        error_stats = {
            'mean_rmse': np.mean(rmse_values),
            'mean_mae': np.mean(mae_values),
            'p90_error': np.percentile(np.abs(all_errors_flat), 90),
            'p95_error': np.percentile(np.abs(all_errors_flat), 95),
            'max_error': np.max(np.abs(all_errors_flat)),
            'std_error': np.std(all_errors_flat)
        }
        
        print("Flow Field Error Analysis:")
        print(f"Mean RMSE: {error_stats['mean_rmse']:.4f}")
        print(f"Mean MAE: {error_stats['mean_mae']:.4f}")
        print(f"90th percentile error: {error_stats['p90_error']:.4f}")
        print(f"95th percentile error: {error_stats['p95_error']:.4f}")
        print(f"Maximum error: {error_stats['max_error']:.4f}")
        print(f"Error standard deviation: {error_stats['std_error']:.4f}")
        
        return error_stats, rmse_values, mae_values
    
    def save_results(self):
        """Save optimization results"""
        # Parameter comparison plot
        keys = list(self.best_params.keys())
        best_vals = [self.best_params[key] for key in keys]
        default_vals = [self.defaults[key] for key in keys]
        
        plt.figure(figsize=(12, 6))
        plt.bar(keys, best_vals, label='Optimized', alpha=0.7)
        plt.bar(keys, default_vals, edgecolor='black', linewidth=2, 
               color='none', capstyle='butt', label='Default')
        plt.title(f'Optimal RMSE: {self.best_rmse:.4f}')
        plt.xticks(rotation=45)
        plt.legend()
        plt.tight_layout()
        plt.savefig(f'parameter_comparison_LB_{self.X_LB}_UB_{self.X_UB}.png', 
                   dpi=150, bbox_inches='tight')
        plt.close()

# Usage example:
if __name__ == "__main__":
    # Configuration
    MODEL = 2
    UPSTREAM = False  # Set to True for upstream/blockage optimization
    
    if MODEL not in [1, 2]:
        raise ValueError("MODEL must be 1 or 2")
    
    # Create and run optimizer
    optimizer = WakeModelOptimizer(model_type=MODEL, upstream=UPSTREAM)
    best_params, best_rmse = optimizer.optimize(init_points=50, n_iter=200)
    
    print(f"Best RMSE: {best_rmse:.4f}")
    print(f"Best parameters: {best_params}")
    
    # Create visualizations
    optimizer.create_animation()
    error_stats, rmse_vals, mae_vals = optimizer.analyze_flow_fields()
    optimizer.save_results()
```

Key improvements in this rewrite:

1. **Better Modularization**: The `WakeModelOptimizer` class encapsulates all functionality with clear separation of concerns.

2. **Improved Flow Field Analysis**: 
   - Added mean absolute error (MAE) alongside RMSE
   - Added percentile-based error reporting (P90, P95)
   - Better error statistics summary
   - Cleaner flow field visualization

3. **Cleaner WFM Instantiation**: The `_create_wfm()` method handles all model configurations in one place.

4. **Preserved Logic**: All your deficit settings, MODEL, and UPSTREAM logic are maintained.

5. **Better Error Handling**: Added try-catch blocks for robust optimization.

6. **Enhanced Reporting**: More comprehensive error analysis with multiple metrics.

The main changes to your flow field analysis approach:
- Now reports both average and percentile-based errors
- Correctly handles the velocity vs. deficit conversion
- Provides more detailed error statistics
- Cleaner visualization with better titles and organization