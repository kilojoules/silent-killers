Looking at your approach, I think it's quite solid overall! You're doing Bayesian optimization to tune wake model parameters against LES data, which is a great methodology. Your observation about needing to report average and p90 errors makes sense for better statistical understanding.

However, I agree the code needs better modularization. Here's a rewritten version that separates concerns and makes the wind farm model instantiation cleaner:

```python
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.animation as animation
import xarray as xr
from py_wake.rotor_avg_models.gaussian_overlap_model import GaussianOverlapAvgModel
from py_wake.deficit_models.gaussian import TurboGaussianDeficit
from py_wake.examples.data.dtu10mw._dtu10mw import DTU10MW
from py_wake.deficit_models.gaussian import BlondelSuperGaussianDeficit2020
from py_wake import HorizontalGrid
from py_wake.deflection_models import JimenezWakeDeflection
from py_wake.turbulence_models import CrespoHernandez
from py_wake.rotor_avg_models import RotorCenter
from py_wake.deficit_models import SelfSimilarityDeficit2020
from py_wake.wind_farm_models import PropagateDownwind, All2AllIterative
from py_wake.superposition_models import LinearSum
from py_wake.ground_models import Mirror
from py_wake.examples.data.hornsrev1 import Hornsrev1Site
from bayes_opt import BayesianOptimization
from py_wake.deficit_models.utils import ct2a_mom1d

class WakeModelOptimizer:
    def __init__(self, model_type=2, upstream=True):
        self.MODEL = model_type
        self.UPSTREAM = upstream
        self.DOWNWIND = not upstream
        
        # Load data and setup
        self._setup_data()
        self._setup_conditions()
        self._setup_bounds_and_defaults()
        
    def _setup_data(self):
        """Load and prepare reference data"""
        self.dat = xr.load_dataset('./DTU10MW.nc')
        self.turbine = DTU10MW()
        self.D = self.turbine.diameter()
        self.dat = self.dat.assign_coords(x=self.dat.x * self.D, y=self.dat.y * self.D)
        
        # Define region of interest
        if self.DOWNWIND:
            X_LB, X_UB = 2, 10
        else:
            X_LB, X_UB = -2, -1
            
        roi_x = slice(X_LB * self.D, X_UB * self.D)
        roi_y = slice(-2 * self.D, 2 * self.D)
        
        self.flow_roi = self.dat.sel(x=roi_x, y=roi_y)
        self.target_x = self.flow_roi.x
        self.target_y = self.flow_roi.y
        
    def _setup_conditions(self):
        """Setup wind speed and turbulence intensity conditions"""
        TIs = np.arange(0.05, 0.45, 0.05)
        WSs = np.arange(4, 11)
        
        full_ti = [TIs for _ in range(WSs.size)]
        self.full_ti = np.array(full_ti).flatten()
        full_ws = [[WSs[ii]] * TIs.size for ii in range(WSs.size)]
        self.full_ws = np.array(full_ws).flatten()
        
        self.site = Hornsrev1Site()
        
        # Prepare observed values
        self._prepare_observed_data()
        
    def _prepare_observed_data(self):
        """Pre-compute observed deficit values"""
        # Create a reference simulation to get CT and TI values
        ref_wfm = All2AllIterative(
            self.site, self.turbine,
            wake_deficitModel=BlondelSuperGaussianDeficit2020(),
            superpositionModel=LinearSum(), deflectionModel=None,
            turbulenceModel=CrespoHernandez(),
            blockage_deficitModel=SelfSimilarityDeficit2020()
        )
        
        ref_sim = ref_wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                         wd=[270] * self.full_ti.size, time=True)
        
        obs_values = []
        for t in range(ref_sim.time.size):
            this_sim = ref_sim.isel(time=t, wt=0)
            observed_deficit = self.flow_roi.deficits.interp(
                ct=this_sim.CT, ti=this_sim.TI, z=0
            )
            obs_values.append(observed_deficit.T)
            
        self.all_obs = xr.concat(obs_values, dim='time')
        
    def _setup_bounds_and_defaults(self):
        """Setup parameter bounds and defaults based on model and flow direction"""
        if self.MODEL == 1:
            if self.DOWNWIND:
                self.pbounds = {
                    'a_s': (0.001, 0.5), 'b_s': (0.001, 0.01), 'c_s': (0.001, 0.5),
                    'b_f': (-2, 1), 'c_f': (0.1, 5),
                    'ch1': (-1, 2), 'ch2': (-1, 2), 'ch3': (-1, 2), 'ch4': (-1, 2),
                }
                self.defaults = {
                    'a_s': 0.17, 'b_s': 0.005, 'c_s': 0.2, 'b_f': -0.68, 'c_f': 2.41,
                    'ch1': 0.73, 'ch2': 0.8325, 'ch3': -0.0325, 'ch4': -0.32
                }
            else:
                self.pbounds = {
                    'ss_alpha': (0.05, 3), 'ss_beta': (0.05, 3),
                    'rp1': (-2, 2), 'rp2': (-2, 2),
                    'ng1': (-3, 3), 'ng2': (-3, 3), 'ng3': (-3, 3), 'ng4': (-3, 3),
                    'fg1': (-2, 2), 'fg2': (-2, 2), 'fg3': (-2, 2), 'fg4': (-2, 2)
                }
                self.defaults = {
                    'ss_alpha': 0.8888888888888888, 'ss_beta': 1.4142135623730951,
                    'rp1': -0.672, 'rp2': 0.4897,
                    'ng1': -1.381, 'ng2': 2.627, 'ng3': -1.524, 'ng4': 1.336,
                    'fg1': -0.06489, 'fg2': 0.4911, 'fg3': 1.116, 'fg4': -0.1577
                }
        else:  # MODEL == 2
            self.pbounds = {
                'A': (0.001, .5), 'cti1': (.01, 5), 'cti2': (0.01, 5),
                'ceps': (0.01, 3), 'ctlim': (0.01, 1),
                'ch1': (-1, 2), 'ch2': (-1, 2), 'ch3': (-1, 2), 'ch4': (-1, 2),
            }
            self.defaults = {
                'A': 0.04, 'cti1': 1.5, 'cti2': 0.8, 'ceps': 0.25, 'ctlim': 0.999,
                'ch1': 0.73, 'ch2': 0.8325, 'ch3': -0.0325, 'ch4': -0.3
            }
            
    def create_wind_farm_model(self, **params):
        """Create wind farm model with given parameters"""
        # Initialize model components
        wake_deficit_model = None
        turbulence_args = {}
        blockage_args = {}
        
        if self.DOWNWIND:
            if self.MODEL == 1:
                def_args = {k: params[k] for k in ['a_s', 'b_s', 'c_s', 'b_f', 'c_f']}
                wake_deficit_model = BlondelSuperGaussianDeficit2020(**def_args)
            else:  # MODEL == 2
                wake_deficit_model = TurboGaussianDeficit(
                    A=params['A'], 
                    cTI=[params['cti1'], params['cti2']],
                    ctlim=params['ctlim'], 
                    ceps=params['ceps'],
                    ct2a=ct2a_mom1d,
                    groundModel=Mirror(),
                    rotorAvgModel=GaussianOverlapAvgModel()
                )
                wake_deficit_model.WS_key = 'WS_jlk'
            
            turbulence_args = {
                'c': np.array([params['ch1'], params['ch2'], params['ch3'], params['ch4']])
            }
            
        else:  # UPSTREAM
            wake_deficit_model = BlondelSuperGaussianDeficit2020()
            blockage_args = {
                'ss_alpha': params['ss_alpha'], 
                'ss_beta': params['ss_beta'],
                'r12p': np.array([params['rp1'], params['rp2']]),
                'ngp': np.array([params['ng1'], params['ng2'], params['ng3'], params['ng4']])
            }
            if self.MODEL == 2:
                blockage_args['groundModel'] = Mirror()
        
        # Create wind farm model
        wfm = All2AllIterative(
            self.site, self.turbine,
            wake_deficitModel=wake_deficit_model,
            superpositionModel=LinearSum(), 
            deflectionModel=None,
            turbulenceModel=CrespoHernandez(**turbulence_args),
            blockage_deficitModel=SelfSimilarityDeficit2020(**blockage_args)
        )
        
        return wfm
    
    def evaluate_rmse(self, **params):
        """Evaluate RMSE for given parameters"""
        try:
            wfm = self.create_wind_farm_model(**params)
            sim_res = wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                         wd=[270] * self.full_ti.size, time=True)
            
            # Compute flow map for all time steps
            flow_maps = []
            for tt in range(self.full_ws.size):
                fm = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y), 
                                    time=[tt])['WS_eff']
                flow_maps.append(fm)
            
            flow_map_combined = xr.concat(flow_maps, dim='time')
            
            # Convert velocities to deficits
            pred_deficits = (sim_res.WS - flow_map_combined.isel(h=0)) / sim_res.WS
            
            # Calculate errors
            errors = self.all_obs - pred_deficits
            rmse = float(np.sqrt((errors ** 2).mean(['x', 'y']).mean('time')))
            
            if np.isnan(rmse):
                return -0.5
            return -rmse
            
        except Exception as e:
            print(f"Error in evaluation: {e}")
            return -0.5
    
    def optimize(self, init_points=50, n_iter=200):
        """Run Bayesian optimization"""
        optimizer = BayesianOptimization(
            f=self.evaluate_rmse, 
            pbounds=self.pbounds, 
            random_state=1
        )
        
        optimizer.probe(params=self.defaults, lazy=True)
        optimizer.maximize(init_points=init_points, n_iter=n_iter)
        
        self.optimizer = optimizer
        self.best_params = optimizer.max['params']
        self.best_rmse = -optimizer.max['target']
        
        return self.best_params, self.best_rmse
    
    def analyze_results(self):
        """Analyze optimization results with detailed error statistics"""
        wfm = self.create_wind_farm_model(**self.best_params)
        sim_res = wfm([0], [0], ws=self.full_ws, TI=self.full_ti, 
                     wd=[270] * self.full_ti.size, time=True)
        
        # Calculate detailed error statistics
        all_errors = []
        rmse_values = []
        
        for t in range(sim_res.time.size):
            this_sim = sim_res.isel(time=t, wt=0)
            observed_deficit = self.flow_roi.deficits.interp(
                ct=this_sim.CT, ti=this_sim.TI, z=0
            )
            
            # Get predicted flow map
            flow_map = sim_res.flow_map(HorizontalGrid(x=self.target_x, y=self.target_y), 
                                      time=[t])
            pred_deficit = (this_sim.WS - flow_map.WS_eff.isel(h=0)) / this_sim.WS
            
            # Calculate errors
            errors = observed_deficit.T - pred_deficit
            all_errors.extend(errors.values.flatten())
            
            rmse = np.sqrt(np.mean(errors**2))
            rmse_values.append(rmse)
            
            # Create visualization
            self._plot_comparison(observed_deficit.T, pred_deficit, errors, t)
        
        # Calculate statistics
        all_errors = np.array(all_errors)
        mean_error = np.mean(all_errors)
        p90_error = np.percentile(np.abs(all_errors), 90)
        overall_rmse = np.mean(rmse_values)
        
        print(f"Mean absolute error: {mean_error:.4f}")
        print(f"P90 absolute error: {p90_error:.4f}")
        print(f"Overall RMSE: {overall_rmse:.4f}")
        print(f"RMSE per time step: {rmse_values}")
        
        return {
            'mean_error': mean_error,
            'p90_error': p90_error,
            'overall_rmse': overall_rmse,
            'rmse_per_step': rmse_values
        }
    
    def _plot_comparison(self, observed, predicted, diff, time_step):
        """Plot comparison between observed and predicted"""
        fig, ax = plt.subplots(3, 1, figsize=(5, 15))
        
        co = ax[0].contourf(self.target_x, self.target_y, observed)
        cp = ax[1].contourf(self.target_x, self.target_y, predicted)
        cd = ax[2].contourf(self.target_x, self.target_y, diff)
        
        for jj, c in enumerate([co, cp, cd]):
            fig.colorbar(c, ax=ax[jj])
        
        ax[0].set_ylabel('Observed')
        ax[1].set_ylabel('Prediction') 
        ax[2].set_ylabel('Diff')
        
        plt.tight_layout()
        plt.savefig(f'figs/comparison_{time_step}.png')
        plt.close()
    
    def create_animation(self, filename=None):
        """Create optimization animation"""
        if filename is None:
            direction = "downstream" if self.DOWNWIND else "upstream"
            filename = f'optimization_animation_{direction}_model_{self.MODEL}.mp4'
        
        def update_plot(frame):
            ax1.clear()
            ax2.clear()
            
            # Get best parameters up to current frame
            best_so_far_params = {}
            best_so_far_rmse = float('inf')
            best_so_far_rmses = []
            
            for i in range(frame + 1):
                if -self.optimizer.space.target[i] <= best_so_far_rmse:
                    best_so_far_rmse = -self.optimizer.space.target[i]
                    best_so_far_params = self.optimizer.res[i]['params']
                best_so_far_rmses.append(best_so_far_rmse)
            
            # Plot convergence
            ax1.plot(-np.array(self.optimizer.space.target), color='gray', alpha=0.5)
            ax1.plot(np.array(best_so_far_rmses), color='black')
            ax1.set_title('Optimization Convergence')
            ax1.set_xlabel('Iteration')
            ax1.set_ylabel('RMSE')
            ax1.grid(True)
            
            # Plot parameters
            keys = list(best_so_far_params.keys())
            best_vals = [best_so_far_params[key] for key in keys]
            default_vals = [self.defaults[key] for key in keys]
            
            ax2.bar(keys, best_vals, label='Optimized')
            ax2.bar(keys, default_vals, edgecolor='black', linewidth=2, 
                   color='none', capstyle='butt', label='Default')
            ax2.set_title(f'Best RMSE: {best_so_far_rmse:.4f}')
            ax2.tick_params(axis='x', rotation=45)
            ax2.legend()
            plt.tight_layout()
            
            return ax1, ax2
        
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        ani = animation.FuncAnimation(fig, update_plot, 
                                    frames=len(self.optimizer.space.target), 
                                    repeat=False)
        
        writer = animation.FFMpegWriter(fps=15)
        ani.save(filename, writer=writer)
        plt.close('all')

# Usage example:
if __name__ == "__main__":
    # Create optimizer instance
    optimizer = WakeModelOptimizer(model_type=2, upstream=False)  # MODEL=2, DOWNWIND=True
    
    # Run optimization
    best_params, best_rmse = optimizer.optimize(init_points=50, n_iter=200)
    
    # Analyze results
    results = optimizer.analyze_results()
    
    # Create animation
    optimizer.create_animation()
    
    print(f"Best parameters: {best_params}")
    print(f"Best RMSE: {best_rmse}")
```

Key improvements in this rewrite:

1. **Modular Design**: Everything is now in a class with clear separation of concerns
2. **Clean WFM Instantiation**: The `create_wind_farm_model()` method handles all the complex logic for different model types and flow directions
3. **Better Error Analysis**: The `analyze_results()` method now computes mean and P90 errors as you suggested
4. **Maintainable**: Much easier to modify and extend
5. **Reusable**: Can easily create multiple optimizers with different settings
6. **Error Handling**: Better exception handling in the evaluation function

The structure makes it much easier to experiment with different model configurations and analyze the results systematically.