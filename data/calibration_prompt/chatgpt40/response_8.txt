Your code is quite extensive and involves various steps in evaluating and optimizing a wind farm model. Here are a few suggestions and thoughts on your approach:

### Code Structure and Modularity
1. **Modularization**: Your code would benefit greatly from being broken down into more modular components. This would not only make it easier to read and maintain but also facilitate testing and debugging. For instance:
   - **Configuration and Initialization**: Separate out the configuration and initialization of models and parameters.
   - **Data Processing**: Have distinct functions for loading and preparing datasets.
   - **Model Evaluation**: Isolate the evaluation logic into its own function or class.
   - **Optimization**: Separate the optimization logic from the rest of the code.
   - **Visualization**: Consider creating a separate module or set of functions for plotting and animations.

2. **Function and Class Design**: Consider creating classes for your models and evaluations. This would encapsulate related operations and data, making your code more organized and reducing global variable dependencies.

### Flow Field Plots and Reporting
1. **Flow Field Plots**: If the current plots are not effectively conveying the necessary information, consider alternative visualization techniques. For instance:
   - Use quiver plots for showing flow direction and magnitude.
   - Compare velocity fields directly rather than just deficits if that's more relevant to your analysis.
   - Consider using interactive plots (e.g., with Plotly) for better exploration of your results.

2. **Reporting Metrics**: Reporting averages and 90th percentiles (p90s) of errors is a good practice, as it provides insights into both typical and worst-case scenarios. Make sure these metrics are computed consistently and are easy to extract and visualize.

### Computational Efficiency
1. **Data Handling**: Make sure that you're not loading or processing more data than necessary. Use efficient data structures and libraries (e.g., xarray for multi-dimensional data) to handle large datasets.

2. **Parallelization**: If the evaluation steps are independent, consider using parallel processing to speed up simulations.

### Code Rewriting Suggestions
Here is a simplified structure suggestion, focusing on modularization and separation of concerns:

```python
class WindFarmModel:
    def __init__(self, site, turbine, model_config):
        self.site = site
        self.turbine = turbine
        self.config = model_config
        self._initialize_model()

    def _initialize_model(self):
        # Initialize wake, turbulence, and blockage models using self.config
        pass

    def simulate(self, ws, ti, wd):
        # Run the simulation and return results
        pass


def load_and_prepare_data(file_path, diameter):
    # Load dataset and prepare it
    pass


def evaluate_model(wfm, data, params):
    # Evaluate the model and return RMSE
    pass


def optimize_model(evaluate_fn, pbounds, defaults):
    # Optimize the model using Bayesian Optimization
    pass


def plot_results(history, best_params, defaults):
    # Plot optimization results and comparisons
    pass


def main():
    # Load data
    data = load_and_prepare_data('./DTU10MW.nc', turbine.diameter())

    # Initialize wind farm model
    wfm = WindFarmModel(site, turbine, model_config)

    # Optimize model
    best_params, best_rmse = optimize_model(lambda params: evaluate_model(wfm, data, params), pbounds, defaults)

    # Plot results
    plot_results(optimizer_history, best_params, defaults)


if __name__ == "__main__":
    main()
```

This structure is just a starting point, and you might need to adjust it based on the specific requirements and details of your project.